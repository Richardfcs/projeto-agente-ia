openapi: 3.0.3
info:
  title: Agente de IA - API de Geração de Documentos
  description: |-
    API para interagir com uma equipe de agentes de IA (CrewAI) para gerar, gerenciar e conversar sobre documentos.
    A autenticação é feita via Bearer Token (JWT) na maioria dos endpoints.
  version: 1.0.0

servers:
  - url: http://127.0.0.1:5000
    description: Servidor de desenvolvimento local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

tags:
  - name: Authentication
    description: Endpoints para registro e login de usuários.
  - name: Conversations & Chat
    description: Endpoints para interagir com a IA e gerenciar o histórico de conversas.
  - name: Documents & Files
    description: Endpoints para upload, download e gerenciamento de arquivos.
  - name: Templates
    description: Endpoints para gerenciamento de templates.

paths:
  # ===================================================================
  # Authentication
  # ===================================================================
  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Registrar um novo usuário
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, properties: {username: {type: string}, password: {type: string, format: password}}}
      responses: {'201': {description: Usuário registrado}, '400': {description: Dados inválidos}, '409': {description: Usuário já existe}}

  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Fazer login e obter um token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, properties: {username: {type: string}, password: {type: string, format: password}}}
      responses: {'200': {description: Login bem-sucedido, retorna token}, '401': {description: Credenciais inválidas}}
  
  /api/auth/profile:
    get:
      tags: [Authentication]
      summary: Obter informações do perfil do usuário logado
      responses: {'200': {description: Perfil do usuário}, '401': {description: Não autorizado}}

  # ===================================================================
  # Conversations & Chat
  # ===================================================================
  /api/chat/conversations:
    post:
      tags: [Conversations & Chat]
      summary: Enviar uma mensagem para a IA
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, properties: {prompt: {type: string}, conversation_id: {type: string}, input_document_id: {type: string}}}
      responses: {'201': {description: Solicitação processada}, '400': {description: Prompt ausente}, '401': {description: Não autorizado}}
    get:
      tags: [Conversations & Chat]
      summary: Listar todas as conversas do usuário
      responses: {'200': {description: Lista de conversas}, '401': {description: Não autorizado}}
  
  /api/chat/conversations/{conversation_id}:
    get:
      tags: [Conversations & Chat]
      summary: Obter o histórico de uma conversa
      parameters: [{name: conversation_id, in: path, required: true, schema: {type: string}}]
      responses: {'200': {description: Lista de mensagens}, '401': {description: Não autorizado}, '404': {description: Conversa não encontrada}}
    delete:
      tags: [Conversations & Chat]
      summary: Excluir uma conversa inteira
      parameters: [{name: conversation_id, in: path, required: true, schema: {type: string}}]
      responses: {'200': {description: Conversa excluída}, '401': {description: Não autorizado}, '404': {description: Conversa não encontrada}}
      
  /api/chat/conversations/{conversation_id}/rename:
    put:
      tags: [Conversations & Chat]
      summary: Renomear o título de uma conversa
      parameters: [{name: conversation_id, in: path, required: true, schema: {type: string}}]
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, properties: {new_title: {type: string}}}
      responses: {'200': {description: Conversa renomeada}, '401': {description: Não autorizado}, '404': {description: Conversa não encontrada}}

  /api/chat/messages/{message_id}/edit:
    put:
      tags: [Conversations & Chat]
      summary: Editar uma mensagem de usuário
      description: Edita uma mensagem e refaz a conversa a partir daquele ponto.
      parameters: [{name: message_id, in: path, required: true, schema: {type: string}}]
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, properties: {new_content: {type: string}}}
      responses: {'200': {description: Mensagem editada, reprocessando}, '401': {description: Não autorizado}, '404': {description: Mensagem não encontrada}}
      
  /api/chat/messages/{message_id}:
    delete:
      tags: [Conversations & Chat]
      summary: Excluir uma única mensagem
      parameters: [{name: message_id, in: path, required: true, schema: {type: string}}]
      responses: {'200': {description: Mensagem excluída}, '401': {description: Não autorizado}, '404': {description: Mensagem não encontrada}}

  /api/chat/messages/{message_id}/regenerate:
    post:
      tags: [Conversations & Chat]
      summary: Regenerar a resposta da IA
      description: Refaz a resposta da IA para um prompt de usuário existente.
      parameters: [{name: message_id, in: path, required: true, schema: {type: string}}]
      responses: {'200': {description: Regeneração iniciada}, '401': {description: Não autorizado}, '404': {description: Mensagem não encontrada}}

  # ===================================================================
  # Documents & Files
  # ===================================================================
  /api/documents/upload:
    post:
      tags: [Documents & Files]
      summary: Fazer upload de um documento
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: {type: object, properties: {file: {type: string, format: binary}}}
      responses: {'201': {description: Arquivo enviado}, '401': {description: Não autorizado}}
      
  /api/documents:
    get:
      tags: [Documents & Files]
      summary: Listar documentos do usuário
      responses: {'200': {description: Lista de metadados}, '401': {description: Não autorizado}}
  
  /api/documents/search:
    get:
      tags: [Documents & Files]
      summary: Buscar documentos por nome
      parameters: [{name: q, in: query, required: true, schema: {type: string}}]
      responses: {'200': {description: Resultado da busca}, '401': {description: Não autorizado}}

  /api/files/{gridfs_file_id}:
    get:
      tags: [Documents & Files]
      summary: Fazer download de um arquivo
      parameters: [{name: gridfs_file_id, in: path, required: true, schema: {type: string}}]
      responses: {'200': {description: Download do arquivo}, '401': {description: Não autorizado}, '404': {description: Arquivo não encontrado}}
      
  /api/documents/{document_id}/rename:
    put:
      tags: [Documents & Files]
      summary: Renomear um documento
      parameters: [{name: document_id, in: path, required: true, schema: {type: string}}]
      requestBody:
        required: true
        content:
          application/json:
            schema: {type: object, properties: {new_filename: {type: string}}}
      responses: {'200': {description: Documento renomeado}, '401': {description: Não autorizado}, '404': {description: Documento não encontrado}}
          
  /api/documents/{document_id}:
    delete:
      tags: [Documents & Files]
      summary: Excluir um documento
      parameters: [{name: document_id, in: path, required: true, schema: {type: string}}]
      responses: {'200': {description: Documento excluído}, '401': {description: Não autorizado}, '404': {description: Documento não encontrado}}
          
  # ===================================================================
  # Templates
  # ===================================================================
  /api/templates/upload:
    post:
      tags: [Templates]
      summary: Fazer upload de um template
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: {type: object, properties: {file: {type: string, format: binary}}}
      responses: {'201': {description: Template enviado}, '401': {description: Não autorizado}}

  /api/templates:
    get:
      tags: [Templates]
      summary: Listar todos os templates disponíveis
      responses: {'200': {description: Lista de metadados}, '401': {description: Não autorizado}}