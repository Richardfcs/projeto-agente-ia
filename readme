# Projeto Agente de IA - Backend

Este √© o reposit√≥rio do backend para o projeto Agente de IA. A aplica√ß√£o √© constru√≠da com Flask e utiliza o MongoDB como banco de dados, Celery para processamento ass√≠ncrono e a API do Google Gemini para as funcionalidades de intelig√™ncia artificial.

## Pr√©-requisitos

Antes de come√ßar, garanta que voc√™ tenha os seguintes softwares instalados em sua m√°quina:

- **Python** (vers√£o 3.10 ou superior)
- **Pip** (gerenciador de pacotes do Python)
- **Git** (para clonar o reposit√≥rio)
- **MongoDB** (uma inst√¢ncia local ou uma conta no [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) para obter a string de conex√£o)
- **Redis** (necess√°rio para o Celery. A forma mais f√°cil de instalar localmente √© via [Docker](https://www.docker.com/))

## ‚öôÔ∏è Instala√ß√£o e Configura√ß√£o

Siga os passos abaixo para configurar o ambiente de desenvolvimento local.

### 1. Clonar o Reposit√≥rio

Abra seu terminal e clone o projeto:

```bash
git clone https://sua-url-do-repositorio.git
cd projeto-agente-ia
```
2. Criar e Ativar o Ambiente Virtual

√â uma boa pr√°tica isolar as depend√™ncias do projeto em um ambiente virtual.

Para macOS / Linux:
```bash
python3 -m venv venv
source venv/bin/activate
```
Para Windows:
```bash
python -m venv venv
.\venv\Scripts\activate
```

3. Instalar as Depend√™ncias

Com o ambiente virtual ativado, instale todas as bibliotecas necess√°rias com um √∫nico comando:

```bash
pip install -r requirements.txt
```

4. Configurar as Vari√°veis de Ambiente

Este √© o passo mais importante. As chaves de API e outras configura√ß√µes sens√≠veis s√£o gerenciadas atrav√©s de um arquivo .env.

a. Crie um arquivo chamado .env na raiz do projeto.

b. Copie o conte√∫do abaixo para dentro do seu arquivo .env e preencha com suas pr√≥prias chaves e configura√ß√µes:

# Arquivo: .env
# Preencha com suas pr√≥prias chaves e configura√ß√µes
```python
# Configura√ß√£o da Aplica√ß√£o Flask
FLASK_ENV=development
SECRET_KEY='coloque-aqui-uma-chave-secreta-bem-longa-e-aleatoria'

# Conex√£o com o Banco de Dados MongoDB
MONGO_URI='sua-string-de-conexao-do-mongodb-aqui'

# Conex√£o com o Broker de Mensagens para Celery
REDIS_URL='redis://localhost:6379/0'

# Chave da API do Google Gemini
GOOGLE_API_KEY='sua-chave-da-api-do-google-aqui'
```

üö® IMPORTANTE: O arquivo .env cont√©m informa√ß√µes sens√≠veis. Ele j√° est√° inclu√≠do no .gitignore e NUNCA deve ser enviado para o reposit√≥rio no GitHub.

‚ñ∂Ô∏è Executando a Aplica√ß√£o

Para rodar o projeto, voc√™ precisar√° de dois terminais abertos, ambos com o ambiente virtual ativado.

1. Iniciar o Servidor Flask

No primeiro terminal, inicie a aplica√ß√£o web:

```bash
python run.py
```

O servidor estar√° dispon√≠vel em http://127.0.0.1:5000. Voc√™ pode testar se ele est√° funcionando acessando http://127.0.0.1:5000/health no seu navegador.

2. Iniciar o Worker do Celery

As tarefas de IA s√£o processadas em segundo plano. Para isso, precisamos de um "worker" do Celery escutando por novas tarefas.

No segundo terminal, execute o seguinte comando:

# NOTA: Este comando ser√° finalizado quando a estrutura do Celery for implementada
```bash
celery -A sua_instancia_celery_aqui worker --loglevel=info
```

(Nota: O comando exato do Celery ser√° definido quando a Se√ß√£o 4 for implementada, mas a estrutura ser√° essa.)

```
üìÇ Estrutura do Projeto
/projeto-agente-ia/
‚îú‚îÄ‚îÄ .env                  # Armazena as vari√°veis de ambiente (secreto)
‚îú‚îÄ‚îÄ requirements.txt      # Lista de depend√™ncias Python
‚îú‚îÄ‚îÄ run.py                # Ponto de entrada para iniciar a aplica√ß√£o
‚îî‚îÄ‚îÄ /src/
    ‚îú‚îÄ‚îÄ __init__.py         # Application Factory (cria a app Flask)
    ‚îú‚îÄ‚îÄ config.py           # Carrega as configura√ß√µes do .env
    ‚îú‚îÄ‚îÄ /api/               # M√≥dulos de endpoints (Blueprints)
    ‚îú‚îÄ‚îÄ /db/                # L√≥gica de conex√£o com o banco de dados
    ‚îî‚îÄ‚îÄ /tasks/             # Tarefas ass√≠ncronas para o Celery (IA, etc.)
```

# Projeto Agente de IA - Checklist de Desenvolvimento (Backend)

Este documento rastreia o progresso do desenvolvimento do backend. Marque as caixas conforme as tarefas forem conclu√≠das.

---

### Se√ß√£o 1: Funda√ß√£o do Projeto (Setup Inicial)

**Objetivo:** Criar um esqueleto de aplica√ß√£o Flask funcional, organizado e pronto para escalar.

- [x] **1.1. Estrutura de Pastas:** Estrutura base com `src`, `api`, `db`, `tasks` est√° criada.
- [x] **1.2. Gerenciamento de Depend√™ncias:** Arquivo `requirements.txt` est√° completo e todas as depend√™ncias foram instaladas.
- [x] **1.3. Configura√ß√£o de Ambiente:** Arquivo `.env` foi criado e o `.gitignore` est√° configurado para ignor√°-lo.
- [x] **1.4. Application Factory:** A fun√ß√£o `create_app` em `src/__init__.py` est√° montando a aplica√ß√£o Flask corretamente.
- [x] **1.5. Conex√£o com Banco de Dados:** A aplica√ß√£o conecta-se com sucesso ao MongoDB na inicializa√ß√£o.
- [x] **1.6. Valida√ß√£o do Setup:** O endpoint `GET /health` est√° funcionando e retorna uma mensagem de sucesso.

---

### Se√ß√£o 2: M√≥dulo de Autentica√ß√£o e Usu√°rios

**Objetivo:** Implementar um sistema seguro de registro e login usando JWT.

- [x] **2.1. Modelo de Dados:** A cole√ß√£o `users` foi definida implicitamente no c√≥digo para armazenar `username` e `hashed_password`.
- [x] **2.2. Fun√ß√µes de Criptografia:** Fun√ß√µes para criar e verificar hashes de senha com `passlib` est√£o implementadas.
- [x] **2.3. Endpoint de Registro (`POST /api/auth/register`):**
    - [x] Recebe `username` e `password`.
    - [x] Verifica se o usu√°rio j√° existe.
    - [x] Salva o novo usu√°rio com a senha criptografada.
    - [x] Retorna status `201 Created` em caso de sucesso.
- [x] **2.4. Endpoint de Login (`POST /api/auth/login`):**
    - [x] Recebe `username` e `password`.
    - [x] Valida as credenciais contra os dados no banco.
    - [x] Gera e retorna um `access_token` JWT em caso de sucesso.
    - [x] Retorna status `401 Unauthorized` em caso de falha.
- [x] **2.5. Endpoint de Perfil (`GET /api/auth/profile`):**
    - [x] A rota est√° protegida e requer um token JWT v√°lido.
    - [x] Extrai a identidade do usu√°rio a partir do token.
    - [x] Retorna os dados do usu√°rio logado (sem a senha).

---

### Se√ß√£o 3: Gerenciamento de Arquivos com GridFS

**Objetivo:** Criar endpoints para upload e download de arquivos grandes.

- [ ] **3.1. Modelos de Dados:** Definir as estruturas das cole√ß√µes `templates` e `documents` no MongoDB.
- [ ] **3.2. Endpoint de Upload de Template (`POST /api/templates/upload`):**
    - [ ] Rota protegida (apenas para usu√°rios autorizados/admins).
    - [ ] Recebe um arquivo (ex: `.docx`, `.xlsx`).
    - [ ] Salva o arquivo no GridFS.
    - [ ] Cria um documento de metadados na cole√ß√£o `templates` referenciando o `file_id` do GridFS.
- [ ] **3.3. Endpoint de Upload de Documento (`POST /api/documents/upload`):**
    - [ ] Rota protegida para usu√°rios logados.
    - [ ] Associa o documento ao `user_id` do usu√°rio atual.
    - [ ] Salva o arquivo no GridFS.
    - [ ] Cria um documento de metadados na cole√ß√£o `documents`.
- [ ] **3.4. Endpoint de Download (`GET /api/files/<gridfs_file_id>`):**
    - [ ] Rota protegida.
    - [ ] Verifica se o usu√°rio logado tem permiss√£o para acessar o arquivo.
    - [ ] Busca o arquivo no GridFS pelo seu ID.
    - [ ] Retorna o arquivo para download (streaming).

---

### Se√ß√£o 4: M√≥dulo Conversacional e Processamento de IA

**Objetivo:** Implementar o fluxo de chat e o processamento ass√≠ncrono das solicita√ß√µes de IA.

- [ ] **4.1. Modelos de Dados:** Definir as estruturas das cole√ß√µes `conversations` e `messages`.
- [ ] **4.2. Configura√ß√£o do Celery:**
    - [ ] Integrar o Celery com a aplica√ß√£o Flask.
    - [ ] Definir a tarefa ass√≠ncrona (`@celery.task`) para o processamento de IA.
- [ ] **4.3. Endpoint de Nova Mensagem (`POST /api/chat/messages`):**
    - [ ] Rota protegida.
    - [ ] Cria/atualiza o documento na cole√ß√£o `conversations`.
    - [ ] Cria a mensagem do usu√°rio na cole√ß√£o `messages`.
    - [ ] Dispara a tarefa ass√≠ncrona no Celery, passando os IDs necess√°rios.
    - [ ] Retorna uma resposta imediata com status `202 Accepted`.
- [ ] **4.4. Endpoints de Hist√≥rico:**
    - [ ] `GET /api/chat/conversations`: Lista todas as conversas do usu√°rio logado.
    - [ ] `GET /api/chat/conversations/<conversation_id>`: Lista todas as mensagens de uma conversa espec√≠fica.
- [ ] **4.5. L√≥gica do Worker de IA (Tarefa Celery):**
    - [ ] Busca o hist√≥rico da conversa e os arquivos necess√°rios do MongoDB/GridFS.
    - [ ] Interage com a API do Gemini.
    - [ ] Usa as fun√ß√µes de `ia_processor` para criar os arquivos de sa√≠da em mem√≥ria (streams).
    - [ ] Salva os arquivos de sa√≠da no GridFS.
    - [ ] Cria a mensagem de resposta do assistente na cole√ß√£o `messages`.
    - [ ] Atualiza o status da conversa e da mensagem para "completed".